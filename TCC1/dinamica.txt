import numpy as np
import matplotlib.pyplot as plt


import numpy as np

def skws(v):
    if len(v) != 3:
        raise ValueError('O vetor de entrada deve ter 3 elementos.')

    S = np.array([
        [0, -v[2], v[1]],
        [v[2], 0, -v[0]],
        [-v[1], v[0], 0]
    ])
    return S



def Rw(phi, theta):
    return np.array([
        [1, 0, np.sin(theta)],
        [0, np.cos(phi), np.sin(phi)*np.cos(theta)],
        [0, np.sin(phi),  np.cos(phi)*np.cos(theta)]
    ])

def dRw(phi, theta, dphi, dtheta):
    return np.array([
        [1, 0, np.cos(theta)*dtheta],
        [0, -np.sin(phi)*dphi, dphi*np.cos(phi)*np.cos(theta)-np.sin(phi)*np.sin(theta)*dtheta],
        [0, np.cos(phi)*dphi,  -dphi*np.sin(phi)*np.cos(theta)-np.cos(phi)*np.sin(theta)*dtheta]
    ])











def calculate_coordinates(angle, radius):
    angles_rad = np.radians(angle)
    x = radius * np.cos(angles_rad)
    y = radius * np.sin(angles_rad)
    z = np.zeros(len(x))
    return np.array([x, y, z])

def rotation_matrices():
    def rotX(theta):
        return np.array([[1, 0, 0], [0, np.cos(theta), -np.sin(theta)], [0, np.sin(theta), np.cos(theta)]])

    def rotY(theta):
        return np.array([[np.cos(theta), 0, np.sin(theta)], [0, 1, 0], [-np.sin(theta), 0, np.cos(theta)]])

    def rotZ(theta):
        return np.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])

    return rotX, rotY, rotZ

def inverse_kinematics(trans, rotation, B, P):
    rotX, rotY, rotZ = rotation_matrices()
    R = np.matmul(np.matmul(rotX(rotation[0]), rotY(rotation[1])), rotZ(rotation[2]))

    home_pos = np.array([0, 0, 0])
    l = np.repeat(trans[:, np.newaxis], 6, axis=1) + np.repeat(home_pos[:, np.newaxis], 6, axis=1) + np.matmul(R, P) - B
    lll = np.linalg.norm(l, axis=0)

    #Calcular as posições das pernas no referencial global da base
    L = l + B
    return l, lll, L

def calculate_servo_angles(l, lll, B, gama_B, r_B):
    lhl = r_B / 3
    ldl = 1.05948100502
    pi = np.pi
    z = np.sqrt(ldl**2 + lhl**2 - (P[0] - B[0])**2 - (P[1] - B[1])**2)
    beta = np.array([pi - 2 * gama_B, -pi / 4 + gama_B, pi + pi / 2, -pi - pi / 2, pi / 4 - gama_B, -pi + 2 * gama_B])

    angles = np.zeros(6)
    H = np.zeros((3, 6))
    A = np.zeros((3, 6))



    for k in range(6):
        A[:, k] = np.transpose([lhl * np.cos(angles[k]) * np.cos(beta[k]) + B[0, k], lhl * np.cos(angles[k]) * np.sin(beta[k]) + B[1, k], lhl * np.sin(angles[k])])

    lx, ly, lz = l
    g = lll**2 - (ldl**2 - lhl**2)
    e = 2 * lhl * lz

    for k in range(6):
        fk = 2 * lhl * (np.cos(beta[k]) * lx[k] + np.sin(beta[k]) * ly[k])
        angles[k] = np.arcsin(g[k] / np.sqrt(e[k]**2 + fk**2)) - np.arctan2(fk, e[k])
        H[:, k] = np.transpose([lhl * np.cos(angles[k]) * np.cos(beta[k]) + B[0, k], lhl * np.cos(angles[k]) * np.sin(beta[k]) + B[1, k], lhl * np.sin(angles[k])])

    return angles, H, A

# Main script
gama_B = 15
pis_B = [gama_B, 120 - gama_B, 120 + gama_B, -120 - gama_B, -120 + gama_B, -gama_B]
r_B = 0.6
B = calculate_coordinates(pis_B, r_B)
print("Coordenadas dos pontos Bi na base:", B)

gama_P = 45
pis_P = [gama_P, 120 - gama_P, 120 + gama_P, -120 - gama_P, -120 + gama_P, -gama_P]
r_P = 0.25
P = calculate_coordinates(pis_P, r_P)
print("Coordenadas dos pontos Pi na plataforma:", P)

trans = np.array([0, 0, 1])
rotation = np.array([0, 0, 0])
l, lll, L = inverse_kinematics(trans, rotation, B, P)
print('Leg lengths to command in order to achieve desired position of plate: \n', lll)

angles, H, A = calculate_servo_angles(l, lll, B, gama_B * np.pi / 180, r_B)
print('angles: ', angles * 180 / np.pi)

# Calculando o vetor BA
BA = H - B

# Calculando o vetor BH
BH = A - B

# Calculando o produto vetorial BF = BA x BH
BF = np.cross(BH.T, BA.T).T

# Calculando o vetor unitário s
BF_magnitude = np.linalg.norm(BF, axis=0)
s = BF / BF_magnitude

AP = P - H
# Imprimindo os resultados
#print("Coordenadas de A (H com alpha = 0):")
#print(A)

#print("\nVetor BA:")
#print(H)

#print("\nVetor BH:")
#print(BH)

#print("\nProduto Vetorial BF = BA x BH:")
#print(BF.T)

#print("\nVetor Unitário s:")
#print(s.T)